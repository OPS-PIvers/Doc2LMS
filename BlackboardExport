/**
 *  BlackboardExport.gs – Blackboard XML/ZIP exporter
 *  ------------------------------------------------------------------
 */

'use strict';

function BlackboardExport_createExportFiles(qs, images, projectFolder, quizTitle) {
  const bbFolder        = projectFolder.createFolder('BlackboardExport');
  const resourcesFolder = bbFolder       .createFolder('resources');

  const imageMap = BB_processImages(images, resourcesFolder);
  const bbXml    = BB_createQuizXML(quizTitle, qs, imageMap);
  const xmlFile  = bbFolder  .createFile('blackboard.xml', bbXml, XML_MIME);
  const maniXml  = BB_createManifest(quizTitle);
  const maniFile = bbFolder  .createFile('imsmanifest.xml', maniXml, XML_MIME);

  const blobs = [
    maniFile.getBlob().setName('imsmanifest.xml'),
    xmlFile .getBlob().setName('blackboard.xml')
  ];
  BB_pushBlobs(blobs, resourcesFolder, 'resources');

  const zip = Utilities.zip(blobs, quizTitle + '_Blackboard.zip');
  const out = bbFolder.createFile(zip);
  PropertiesService.getScriptProperties()
        .setProperties({ lastExportFileId: out.getId(),
                         lastExportFileName: out.getName() });

  return { success: true, fileUrl: out.getUrl(), exportFolderUrl: bbFolder.getUrl() };
}

/*──────── helpers ────────*/

function BB_processImages(images, resourcesFolder) {
  const map = new Map();
  if (!images) return map;
  images.forEach(function (img) {
    if (!img.blob) return;
    resourcesFolder.createFile(img.blob).setName(img.filename);
    map.set(img.filename, true);
  });
  return map;
}

function BB_pushBlobs(arr, folder, prefix) {
  const it = folder.getFiles();
  while (it.hasNext()) {
    const f = it.next();
    arr.push(f.getBlob().setName(prefix + '/' + f.getName()));
  }
}

function BB_createManifest(title) {
  const safe = sanitizeHtml(title);
  return `<?xml version="1.0" encoding="UTF-8"?>
<manifest identifier="BB-MANIFEST">
  <metadata><schema>Blackboard CC</schema><schemaversion>1.2</schemaversion></metadata>
  <organizations>
    <organization identifier="bb_org">
      <item identifier="bb_item" identifierref="bb_res"><title>${safe}</title></item>
    </organization>
  </organizations>
  <resources>
    <resource identifier="bb_res" type="imsqti_xmlv1p2/blackboard_xmlv1" href="blackboard.xml">
      <file href="blackboard.xml"/>
    </resource>
  </resources>
</manifest>`;
}

/*──── Blackboard quiz XML ────*/

function BB_createQuizXML(title, qs, imageMap) {
  const assessId = 'bb_' + Utilities.getUuid().replace(/-/g,'').slice(0,10);
  const safe     = sanitizeHtml(title);
  let xml =
`<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2">
  <assessment ident="${assessId}" title="${safe}">
    <section ident="root_section">`;

  qs.forEach(function (q, idx) {
    const qNum = idx + 1;
    xml += BB_createMultipleChoiceXML(q, qNum, imageMap);
  });

  xml += `
    </section>
  </assessment>
</questestinterop>`;
  return xml;
}

function BB_createMultipleChoiceXML(q, qNum, imageMap) {
  let stem = q.questionText;
  if (q.hasImages) stem = replaceImageTags(stem, imageMap, qNum);
  const stemHtml = /[<&]/.test(stem) ? `<![CDATA[${stem}]]>` : stem;

  let xml =
`      <item ident="${qNum}">
        <presentation>
          <material><mattext texttype="text/html">${stemHtml}</mattext></material>
          <response_lid ident="${qNum}" rcardinality="Single">
            <render_choice shuffle="No">`;

  q.options.forEach(function (opt, i) {
    const optId = 'choice_' + (i + 1);
    let txt = opt.hasImages ? opt.text : sanitizeHtml(opt.text);
    if (opt.hasImages) txt = replaceImageTags(txt, imageMap, qNum);
    txt = `<![CDATA[${txt}]]>`;
    xml += `
              <response_label ident="${optId}">
                <material><mattext texttype="text/html">${txt}</mattext></material>
              </response_label>`;
  });

  xml += `
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes><decvar vartype="Decimal" varname="SCORE" minvalue="0" maxvalue="100"/></outcomes>
          <respcondition continue="No">
            <conditionvar><varequal respident="${qNum}">choice_${q.correctAnswerIndex + 1}</varequal></conditionvar>
            <setvar varname="SCORE" action="Set">100</setvar>
          </respcondition>
        </resprocessing>
      </item>`;
  return xml;
}
