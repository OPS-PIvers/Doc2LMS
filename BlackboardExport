/**
 * BlackboardExport.gs – Exports quiz for Blackboard.
 * This module produces an XML package similar to IMSCC but with Blackboard‐specific metadata.
 */
function BlackboardExport_createExportFiles(questionsData, images, projectFolder, quizTitle) {
  try {
    const bbFolder = projectFolder.createFolder('BlackboardExport');
    const { resources: resourcesFolder } = Utilities_shared.createSubfolders(bbFolder, ['resources']);

    // Process images
    const imageMap = new Map();
    images.forEach(img => {
      if (img.blob && !imageMap.has(img.filename)) {
        const file = resourcesFolder.createFile(img.blob).setName(img.filename);
        imageMap.set(img.filename, file.getId());
      }
    });

    // Build XML blobs
    const bbXml = createBlackboardXML(quizTitle, questionsData, imageMap);
    const manifestXml = createBlackboardManifest(quizTitle);
    const xmlBlob = Utilities.newBlob(bbXml, 'application/xml', 'blackboard.xml');
    const manifestBlob = Utilities.newBlob(manifestXml, 'application/xml', 'imsmanifest.xml');

    // Collect blobs
    const blobs = [xmlBlob, manifestBlob];
    resourcesFolder.getFiles().forEach(f => blobs.push(f.getBlob().setName('resources/' + f.getName())));

    // Zip and save
    const zipBlob = Utilities.zip(blobs, `${quizTitle}_Blackboard.zip`);
    const exportFile = bbFolder.createFile(zipBlob);

    PropertiesService.getScriptProperties().setProperty('lastExportFileId', exportFile.getId());
    PropertiesService.getScriptProperties().setProperty('lastExportFileName', exportFile.getName());

    return { success: true, fileUrl: exportFile.getUrl(), exportFolderUrl: bbFolder.getUrl(), exportFileId: exportFile.getId() };
  } catch (e) {
    console.error('Blackboard export error:', e);
    throw new AppError(
      `Blackboard export failed (internal): ${e.message}`,
      'Failed to export quiz. Please verify your questions and try again.'
    );
  }
}

function createBlackboardXML(quizTitle, questionsData, imageMap) {
  var assessmentId = "bb_" + Utilities.getUuid().replace(/-/g, "");
  var sanitized = quizTitle.replace(/[<>&'"]/g, "");
  var xml = '<?xml version="1.0" encoding="UTF-8"?>\n' +
            '<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2" \n' +
            '   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n' +
            '   xsi:schemaLocation="http://www.imsglobal.org/xsd/ims_qtiasiv1p2 http://www.imsglobal.org/profile/blackboard/blackboard_qti.xsd">\n' +
            '  <assessment ident="' + assessmentId + '" title="' + sanitized + '">\n' +
            '    <qtimetadata>\n' +
            '      <qtimetadatafield>\n' +
            '        <fieldlabel>blackboard_profile</fieldlabel>\n' +
            '        <fieldentry>bb.export.v1</fieldentry>\n' +
            '      </qtimetadatafield>\n' +
            '      <qtimetadatafield>\n' +
            '        <fieldlabel>qmd_assessmenttype</fieldlabel>\n' +
            '        <fieldentry>Examination</fieldentry>\n' +
            '      </qtimetadatafield>\n' +
            '      <qtimetadatafield>\n' +
            '        <fieldlabel>qmd_scoretype</fieldlabel>\n' +
            '        <fieldentry>Percentage</fieldentry>\n' +
            '      </qtimetadatafield>\n' +
            '    </qtimetadata>\n' +
            '    <section ident="root_section">\n';
  questionsData.forEach(function(q, idx) {
    var num = idx + 1;
    // Call createMultipleChoiceXML with the imageMap.
    xml += createMultipleChoiceXML(q, num, imageMap);
  });
  xml += "    </section>\n  </assessment>\n</questestinterop>";
  return xml;
}


function createBlackboardManifest(quizTitle) {
  var sanitized = quizTitle.replace(/[<>&'"]/g, "");
  return '<?xml version="1.0" encoding="UTF-8"?>\n' +
         '<manifest xmlns="http://www.imsglobal.org/xsd/imsccv1p2/imscp_v1p1" \n' +
         '   xmlns:lom="http://ltsc.ieee.org/xsd/imsccv1p2/LOM/resource" \n' +
         '   xmlns:lomimscc="http://ltsc.ieee.org/xsd/imsccv1p2/LOM/manifest" \n' +
         '   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" \n' +
         '   identifier="bb_manifest" \n' +
         '   xsi:schemaLocation="http://www.imsglobal.org/xsd/imsccv1p2/imscp_v1p1 \n' +
         '   http://www.imsglobal.org/profile/blackboard/blackboard_manifest.xsd">\n' +
         "  <metadata>\n" +
         "    <schema>Blackboard Common Cartridge</schema>\n" +
         "    <schemaversion>1.2.0</schemaversion>\n" +
         "    <lomimscc:lom>\n" +
         "      <lomimscc:general>\n" +
         "        <lomimscc:title>\n" +
         "          <lomimscc:string>" + sanitized + "</lomimscc:string>\n" +
         "        </lomimscc:title>\n" +
         "      </lomimscc:general>\n" +
         "    </lomimscc:lom>\n" +
         "  </metadata>\n" +
         "  <organizations>\n" +
         '    <organization identifier="bb_org" structure="rooted-hierarchy">\n' +
         "      <item identifier=\"bb_root\">\n" +
         '        <item identifier="bb_item1" identifierref="bb_res0001">\n' +
         "          <title>" + sanitized + "</title>\n" +
         "        </item>\n" +
         "      </item>\n" +
         "    </organization>\n" +
         "  </organizations>\n" +
         "  <resources>\n" +
         '    <resource identifier="bb_res0001" type="imsqti_xmlv1p2/blackboard_xmlv1" href="blackboard.xml">\n' +
         "      <file href=\"blackboard.xml\"/>\n" +
         "    </resource>\n" +
         "  </resources>\n" +
         "</manifest>";
}


// Helper: createMultipleChoiceXML now accepts an imageMap.
function createMultipleChoiceXML(question, questionNumber, imageMap) {
  var qText = question.questionText;
  if (question.hasImages) {
    // Pass in the questionNumber so the utility can build correct filenames
    qText = Utilities_shared.replaceImageTags(qText, imageMap, questionNumber);
  }
  var optsXml = "";
  question.options.forEach(function(opt, i) {
    var optionId = "choice_" + (i + 1);
    var optText = (typeof opt === "string") ? opt : opt.text;
    if (typeof opt === "object" && opt.hasImages && imageMap) {
      optText = replaceImageTags(opt.text, imageMap);
    }
    optsXml += "          <simpleChoice identifier=\"" + optionId + "\">" + sanitizeHtml(optText) + "</simpleChoice>\n";
  });
  return '    <choiceInteraction responseIdentifier="RESPONSE_' + questionNumber + '" shuffle="No" maxChoices="1">\n' +
         optsXml +
         '    </choiceInteraction>\n';
}
