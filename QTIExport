/**
 *  QTIExport.gs – IMS QTI v2.1/2.2 exporter
 *  Depends on Utilities.gs
 *  ------------------------------------------------------------------
 */

'use strict';

function QTIExport_createExportFiles(questions, images, projectFolder, quizTitle) {
  // 1 ‒ folders
  const itemsFolder     = projectFolder.createFolder('items');
  const resourcesFolder = projectFolder.createFolder('resources');

  // 2 ‒ images
  const imageMap = QTI_processImages(images, resourcesFolder);

  // 3 ‒ assessment + item XML
  const assessXml  = QTI_createAssessment(quizTitle, questions.length);
  const assessFile = projectFolder.createFile('assessment.xml', assessXml, XML_MIME);

  questions.forEach(function (q, idx) {
    const itemXml = QTI_createItem(q, idx + 1, imageMap);
    itemsFolder.createFile(`item_${idx + 1}.xml`, itemXml, XML_MIME);
  });

  // 4 ‒ manifest
  const manifestXml  = QTI_createManifest(quizTitle, questions.length, imageMap);
  const manifestFile = projectFolder.createFile('imsmanifest.xml', manifestXml, XML_MIME);

  // 5 ‒ zip
  const blobs = [
    manifestFile.getBlob().setName('imsmanifest.xml'),
    assessFile .getBlob().setName('assessment.xml')
  ];
  QTI_pushBlobs(blobs, itemsFolder, 'items');
  QTI_pushBlobs(blobs, resourcesFolder, 'resources');

  const zip = Utilities.zip(blobs, quizTitle + '.zip');
  const out = projectFolder.createFile(zip);

  PropertiesService.getScriptProperties()
        .setProperties({ lastExportFileId: out.getId(),
                         lastExportFileName: out.getName() });

  return { success: true,
           exportFileUrl: out.getUrl(),
           exportFolderUrl: projectFolder.getUrl(),
           exportFileId: out.getId() };
}

/*──────────────────────── helpers ────────────────────────*/

function QTI_processImages(images, resourcesFolder) {
  const map = new Map();
  if (!images) return map;
  const seen = {};
  images.forEach(function (img) {
    if (!img.blob || seen[img.filename]) return;
    const file = resourcesFolder.createFile(img.blob).setName(img.filename);
    map.set(img.filename, file.getId());
    seen[img.filename] = true;
  });
  return map;
}

function QTI_pushBlobs(targetArray, folder, prefix) {
  const it = folder.getFiles();
  while (it.hasNext()) {
    const f = it.next();
    targetArray.push(f.getBlob().setName(prefix + '/' + f.getName()));
  }
}

/*──── assessment & manifest ────*/

function QTI_createAssessment(title, itemCount) {
  const id   = 'assessment_' + Utilities.getUuid().replace(/-/g,'').slice(0,12);
  const safe = sanitizeHtml(title);
  let refs = '';
  for (let i=1;i<=itemCount;i++) {
    refs += `      <assessmentItemRef identifier="item${i}" href="items/item_${i}.xml"/>\n`;
  }
  return `<?xml version="1.0" encoding="UTF-8"?>
<assessmentTest xmlns="http://www.imsglobal.org/xsd/imsqti_v2p1" identifier="${id}" title="${safe}">
  <testPart identifier="part1" navigationMode="linear" submissionMode="individual">
    <assessmentSection identifier="sec1" title="${safe}">${refs}    </assessmentSection>
  </testPart>
</assessmentTest>`;
}

/**
 * Build a valid QTI 2.1 manifest.
 *  ‑ adds one resource for the assessment test
 *  ‑ each item is declared and set as a dependency
 *  ‑ image files remain basic webcontent resources
 */
function QTI_createManifest(title, itemCount, imageMap) {
  const safe = sanitizeHtml(title);
  let deps   = '';
  let items  = '';
  for (let i = 1; i <= itemCount; i++) {
    const id = `item_${i}`;
    items += `    <resource identifier="${id}" type="imsqti_item_xml" href="items/${id}.xml"/>\n`;
    deps  += `      <dependency identifierref="${id}"/>\n`;
  }

  let imgs = '';
  imageMap.forEach((_id, fn) => {
    imgs += `    <resource identifier="${fn}" type="webcontent" href="resources/${fn}"/>\n`;
  });

  return `<?xml version="1.0" encoding="UTF-8"?>
<manifest identifier="QTI-MANIFEST"
          xmlns="http://www.imsglobal.org/xsd/imscp_v1p1">
  <metadata>
    <schema>IMS Content</schema><schemaversion>1.2</schemaversion>
  </metadata>
  <resources>
    <resource identifier="assessment"
              type="imsqti_test_xml"
              href="assessment.xml">
      <file href="assessment.xml"/>
${deps.trimEnd()}
    </resource>
${items}${imgs}  </resources>
</manifest>`;
}


/*──── item writer ────*/

/**
 * Build one QTI 2.1 assessmentItem file.
 * ──────────────────────────────────────────────────────────────────
 * @param {Object}  q        – parsed question object
 * @param {number}  qNum     – running 1‑based item number
 * @param {Map}     imageMap – filename → fileId map (for img‑tag replacement)
 * @return {string} full XML string
 *
 * ‑ Adds defensive checks so Schoology never sees
 *   • NaN correctResponse values
 *   • empty / undefined stem text
 */
function QTI_createItem(q, qNum, imageMap) {

  /* —► sane defaults to prevent NaN / blank errors — */
  const validOptionCount = Array.isArray(q.options) ? q.options.length : 0;
  const goodIndex = (typeof q.correctAnswerIndex === 'number' &&
                     q.correctAnswerIndex >= 0 &&
                     q.correctAnswerIndex < validOptionCount)
                     ? q.correctAnswerIndex
                     : 0;                              // default to first option

  const correctIdentifier = `choice_${goodIndex + 1}`;
  const itemId = `item${qNum}`;
  const respId = `R${qNum}`;

  /* baseType decided by question type */
  const baseType =
      (q.type === QUESTION_TYPES.MULTIPLE_CHOICE ||
       q.type === QUESTION_TYPES.TRUE_FALSE) ? 'identifier' :
      (q.type === QUESTION_TYPES.NUMERIC ||
       q.type === QUESTION_TYPES.FILL_IN_BLANK) ? 'float' :
      'string';

  /* ---------- XML assembly ---------- */

  return `<?xml version="1.0" encoding="UTF-8"?>
<assessmentItem xmlns="http://www.imsglobal.org/xsd/imsqti_v2p1"
  identifier="${itemId}"
  title="Question ${qNum}"
  adaptive="false"
  timeDependent="false">

  <responseDeclaration identifier="${respId}"
                       cardinality="single"
                       baseType="${baseType}">
    ${q.type === QUESTION_TYPES.MULTIPLE_CHOICE || q.type === QUESTION_TYPES.TRUE_FALSE
        ? `<correctResponse><value>${correctIdentifier}</value></correctResponse>`
        : ''}
  </responseDeclaration>

  <outcomeDeclaration identifier="SCORE"
                      cardinality="single"
                      baseType="float">
    <defaultValue><value>0</value></defaultValue>
  </outcomeDeclaration>

  <itemBody>
${QTI_writeBody(q, respId, qNum, imageMap, goodIndex)}
  </itemBody>

  <responseProcessing>
${QTI_responseProcessing(q, respId, correctIdentifier)}
  </responseProcessing>
</assessmentItem>`;
}


/*── sections used above ─*/

function QTI_writeCorrectResponse(q) {
  switch (q.type) {
    case QUESTION_TYPES.MULTIPLE_CHOICE:
      return `<correctResponse><value>choice_${q.correctAnswerIndex + 1}</value></correctResponse>`;
    default:
      return '';
  }
}

/**
 * Build the <itemBody> for any question.
 * Ensures minimum QTI validity even when parsing found
 * no stem or fewer than two options.
 *
 * @param {Object}  q            question object
 * @param {string}  respId       response identifier (e.g. "R1")
 * @param {number}  qNum         1‑based question number
 * @param {Map}     imageMap     filename → fileId
 * @param {number}  goodIdx      validated correct answer index
 * @return {string}              XML fragment to embed inside <itemBody>
 */
function QTI_writeBody(q, respId, qNum, imageMap, goodIdx) {

  /* ── 1. stem ─────────────────────────────────────────── */
  let stem = typeof q.questionText === 'string' ? q.questionText : '';
  if (q.hasImages) stem = replaceImageTags(stem, imageMap, qNum);
  if (!stem.trim()) stem = `Question ${qNum}`;          // fallback text

  /* Multiple‑choice / true‑false */
  if (q.type === QUESTION_TYPES.MULTIPLE_CHOICE ||
      q.type === QUESTION_TYPES.TRUE_FALSE) {

    const choices = [];                // collect <simpleChoice> strings
    const original = Array.isArray(q.options) ? q.options : [];

    /* ── 2. original parsed options ── */
    original.forEach(function (opt, i) {
      let txt = opt && typeof opt.text === 'string' ? opt.text : '';
      if (opt && opt.hasImages) txt = replaceImageTags(txt, imageMap, qNum);
      if (!txt.trim()) txt = `Option ${i + 1}`;
      choices.push(
        `      <simpleChoice identifier="choice_${i + 1}"><![CDATA[${txt}]]></simpleChoice>`
      );
    });

    /* ── 3. pad to at least TWO options & ensure choice_1 exists ── */
    if (choices.length === 0) {
      choices.push('      <simpleChoice identifier="choice_1"><![CDATA[Option 1]]></simpleChoice>');
    }
    if (choices.length < 2) {
      choices.push(`      <simpleChoice identifier="choice_${choices.length + 1}"><![CDATA[Option ${choices.length + 1}]]></simpleChoice>`);
    }

    return `    <p>${stem}</p>
    <choiceInteraction responseIdentifier="${respId}" maxChoices="1">
${choices.join('\n')}
    </choiceInteraction>`;
  }

  /* ── 4. default short‑answer / essay fallback ── */
  return `    <p>${stem}</p>
    <textEntryInteraction responseIdentifier="${respId}" expectedLength="100"/>`;
}



function QTI_responseProcessing(q, respId) {
  if (q.type !== QUESTION_TYPES.MULTIPLE_CHOICE) {
    return '<responseCondition><setOutcomeValue identifier="SCORE"><baseValue baseType="float">0</baseValue></setOutcomeValue></responseCondition>';
  }
  return `<responseCondition>
    <responseIf>
      <match><variable identifier="${respId}"/><correct identifier="${respId}"/></match>
      <setOutcomeValue identifier="SCORE"><baseValue baseType="float">1</baseValue></setOutcomeValue>
    </responseIf>
    <responseElse>
      <setOutcomeValue identifier="SCORE"><baseValue baseType="float">0</baseValue></setOutcomeValue>
    </responseElse>
  </responseCondition>`;
}
