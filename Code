/** Correct XML mime‑type since MimeType.XML does not exist */
const XML_MIME = 'application/xml';

/**
 * Code.gs – Main entry point.
 */
function onOpen() {
  DocumentApp.getUi()
    .createMenu('Quiz Tools')
    .addItem('Open Quiz Converter', 'showSidebar')
    .addItem('Apply Quick Fixes', 'showQuickFixesDialog')
    .addItem('Audit Question Types', 'showAuditDialog')
    .addToUi();
}

/** UI helper – opens a sidebar that lists every parsed question
 *  with a dropdown to adjust its detected type.
 *  Called from custom menu item “Audit Question Types”.           */
function showAuditDialog() {

  const data   = auditQuestionTypes();        // [{number,type,text}, …]
  const types  = [
    'MULTIPLE_CHOICE','TRUE_FALSE','FILL_IN_BLANK',
    'SHORT_ANSWER','ESSAY','MATCHING','ORDERING'
  ];

  /* Build HTML table dynamically */
  let rows = data.map(q => {
    const opts = types.map(t =>
      `<option value="${t}" ${t===q.type?'selected':''}>${t}</option>`).join('');
    return `<tr>
              <td>${q.number}</td>
              <td><select data-qnum="${q.number}">${opts}</select></td>
              <td style="max-width:350px">${q.text}</td>
            </tr>`;
  }).join('');

  const html = HtmlService.createHtmlOutput(
    `
      <style>
        body {font-family:Roboto,Arial,sans-serif;font-size:13px}
        table {border-collapse:collapse;width:100%}
        td,th {padding:4px;border:1px solid #ccc}
        th {background:#f1f1f1}
      </style>
      <h3>Review Question Types</h3>
      <table>
        <thead><tr><th>#</th><th>Type</th><th>Stem (preview)</th></tr></thead>
        <tbody>${rows}</tbody>
      </table>
      <button onclick="google.script.host.close()">Close</button>
    `
  ).setTitle('Audit Question Types').setWidth(450);

  DocumentApp.getUi().showSidebar(html);
}


function showSidebar() {
  try {
    var template = HtmlService.createTemplateFromFile('Sidebar');
    var evaluated = template.evaluate().setTitle('Quiz Converter').setWidth(300);
    DocumentApp.getUi().showSidebar(evaluated);
    return 'Sidebar created';
  } catch (e) {
    console.error('Error showing sidebar: ' + e);
    throw e;
  }
}

function include(filename) {
  return HtmlService.createHtmlOutputFromFile(filename).getContent();
}

/**
 * Combines parsed questions and answers into a unified data structure.
 * @param {Array<Object>} questions - Array of question objects from parsing (must include `number`).
 * @param {Array<Object>} answers - Array of answer objects from parsing (must include `questionNumber`).
 * @return {Array<Object>} Combined array where each object has question data and its corresponding answers.
 */
function combineQuestionsAndAnswers(questions, answers) {
  if (!Array.isArray(questions)) throw new Error('combineQuestionsAndAnswers: questions must be an array');
  if (!Array.isArray(answers)) throw new Error('combineQuestionsAndAnswers: answers must be an array');
  // Build map from questionNumber to list of answer entries
  const answerMap = new Map();
  answers.forEach(ans => {
    const num = ans.questionNumber || ans.number;
    if (!answerMap.has(num)) answerMap.set(num, []);
    answerMap.get(num).push(ans);
  });

  // Merge for each question
  return questions.map(q => {
    const qAnswers = answerMap.get(q.number) || [];
    return Object.assign({}, q, { correctAnswers: qAnswers });
  });
}

/**
 * startConversion – Main conversion function.
 * Options:
 *   exportFormat: one of "IMSCC" | "QTI" | "Blackboard" | "Moodle" (default IMSCC)
 *   applyQuickFixes: boolean (default false)
 */
function startConversion(options) {
  try {
    options = options || {};
    const exportFormat = (options.exportFormat || 'IMSCC').toUpperCase();
    const doc = DocumentApp.getActiveDocument();
    const docName = doc.getName();

    if (options.applyQuickFixes && applyQuickFixes()) {
      Utilities.sleep(1000);
    }

    const mainFolder = getOrCreateMainFolder();
    const timestamp = formatTimestamp(new Date());
    const projectFolder = mainFolder.createFolder(`${docName} - ${timestamp}`);

    // Parse questions, images, and answers
    const parseFn = {
      IMSCC: IMSCCQuestionParsing_parseQuestions,
      QTI: QTIQuestionParsing_parseQuestions,
      MOODLE: MoodleQuestionParsing_parseQuestions,
      BLACKBOARD: BlackboardQuestionParsing_parseQuestions
    }[exportFormat];
    const imageFn = {
      IMSCC: IMSCCQuestionParsing_getImages,
      QTI: QTIQuestionParsing_getImages,
      MOODLE: MoodleQuestionParsing_getImages,
      BLACKBOARD: BlackboardQuestionParsing_getImages
    }[exportFormat];
    const answerFn = {
      IMSCC: IMSCCAnswerParsing_parseAnswers,
      QTI: QTIAnswerParsing_parseAnswers,
      MOODLE: MoodleAnswerParsing_parseAnswers,
      BLACKBOARD: BlackboardAnswerParsing_parseAnswers
    }[exportFormat];

    const questions = parseFn();
    const images = imageFn();
    // after you call answerFn()
    const rawAnswers = answerFn();
    const answers = Array.isArray(rawAnswers)
      ? rawAnswers
      : (Array.isArray(rawAnswers.answers) 
          ? rawAnswers.answers 
          : []);

    // now you know `answers` is an array
    const combinedData = combineQuestionsAndAnswers(questions, answers);

    // Dispatch export via factory
    const handler = ExportFactory.get(exportFormat);
    const exportResult = handler.export(combinedData, images, projectFolder, docName);

    return {
      success: true,
      exportFolderUrl: projectFolder.getUrl(),
      fileUrl: exportResult.imsccFileUrl || exportResult.exportFileUrl || exportResult.fileUrl,
      message: 'Conversion completed successfully!'
    };
  } catch (e) {
    const ui = DocumentApp.getUi();
    if (e.name === 'AppError') {
      ui.alert('Quiz Converter Error', e.userMessage, ui.ButtonSet.OK);
    } else {
      ui.alert('Quiz Converter Error', 'Unexpected error: ' + e.message, ui.ButtonSet.OK);
      console.error(e);
    }
    throw e;
  }
}

function getOrCreateMainFolder() {
  var folderName = "Doc to LMS";
  var folders = DriveApp.getFoldersByName(folderName);
  if (folders.hasNext()) return folders.next();
  return DriveApp.createFolder(folderName);
}

function formatTimestamp(date) {
  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
  var day = date.getDate();
  var month = months[date.getMonth()];
  var year = date.getFullYear();
  var hours = String(date.getHours()).padStart(2, '0');
  var minutes = String(date.getMinutes()).padStart(2, '0');
  return month + " " + day + " " + year + " " + hours + ":" + minutes;
}

function getDirectDownloadUrl() {
  try {
    var fileId = PropertiesService.getScriptProperties().getProperty("lastExportFileId");
    var fileName = PropertiesService.getScriptProperties().getProperty("lastExportFileName");
    if (!fileId) throw new Error("No export file found.");
    var file = DriveApp.getFileById(fileId);
    var blob = file.getBlob();
    var base64 = Utilities.base64Encode(blob.getBytes());
    return { data: base64, mimeType: blob.getContentType(), filename: fileName || file.getName() };
  } catch (e) {
    console.error(e);
    throw new Error("Download preparation failed: " + e.message);
  }
}
