/**
 *  ðŸ”§  Utilities.gs
 *  â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”
 *  Canonical helper functions shared by every module.
 *  This file replaces all duplicate sanitizeHtml / replaceImageTags
 *  definitions that were scattered across exporter files.
 *  Make sure no other file still contains its own copy.
 */

/** Constant path used by all image tags */
const RES_PATH = '$IMS-CC-FILEBASE$../resources/';

/** HTML entityâ€‘safe text (single authoritative copy) */
function sanitizeHtml(text) {
  if (!text) return '';
  return text
    .replace(/&/g,  '&amp;')
    .replace(/</g,  '&lt;')
    .replace(/>/g,  '&gt;')
    .replace(/"/g,  '&quot;')
    .replace(/'/g,  '&apos;');
}

/**
 * Replace every `[IMG:id]` placeholder in `text` with a proper <img> tag.
 * @param {string}   text          The text that may contain placeholders.
 * @param {Map}      imageMap      Map filenameÂ â†’Â DriveÂ fileId (built by exporter).
 * @param {number}   qNum          Current question number (needed for filename).
 * @return {string} processed HTML string
 */
function replaceImageTags(text, imageMap, qNum) {
  if (!text) return '';
  return text.replace(/\[IMG:([^\]]+)\]/g, function (_m, id) {
    const filename = `question_${qNum}_image_${id}.png`;
    if (imageMap && imageMap.has(filename)) {
      return `<img src="${RES_PATH}${filename}" alt=""/>`;
    }
    // leave untouched if not found â€“ easier for debugging
    return _m;
  });
}
