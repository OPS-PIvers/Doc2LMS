/**
 *  IMSCCExport.gs – IMS Common Cartridge (.imscc) exporter
 *  Depends on Utilities.gs (sanitizeHtml, replaceImageTags, RES_PATH)
 *  ------------------------------------------------------------------
 */

'use strict';

/**
 * Main entry called by startConversion().
 * @return {Object} status payload
 */
function IMSCCExport_createExportFiles(questionsData, images, projectFolder, quizTitle) {
  if (!projectFolder || !quizTitle) throw new Error('Project folder & title required');

  // 1 ‒ folder scaffolding
  const ccresFolder     = projectFolder.createFolder('ccres0000001');
  const resourcesFolder = projectFolder.createFolder('resources');

  // 2 ‒ image processing
  const imageMap = IMSCC_processImages(images, resourcesFolder);

  // 3 ‒ generate XML files
  const qtiXml      = IMSCC_createQTI(quizTitle, questionsData, imageMap);
  const manifestXml = IMSCC_createManifestFile(
                          quizTitle,
                          IMSCC_generateResourceEntries(imageMap));

  // 4 ‒ write files into sub‑folders
  const qtiFile      = ccresFolder  .createFile('ccres0000001.xml', qtiXml,      XML_MIME);
  const manifestFile = projectFolder.createFile('imsmanifest.xml',  manifestXml, XML_MIME);

  // 5 ‒ collect blobs for zip
  const blobs = [
    qtiFile     .getBlob().setName('ccres0000001/ccres0000001.xml'),
    manifestFile.getBlob().setName('imsmanifest.xml')
  ];

  const resIter = resourcesFolder.getFiles();
  while (resIter.hasNext()) {
    const f = resIter.next();
    blobs.push(f.getBlob().setName('resources/' + f.getName()));
  }

  // 6 ‒ zip & finish
  const zipBlob   = Utilities.zip(blobs, quizTitle + '.imscc');
  const exportFile = projectFolder.createFile(zipBlob);
  PropertiesService.getScriptProperties()
        .setProperties({ lastExportFileId: exportFile.getId(),
                         lastExportFileName: exportFile.getName() });

  return { success: true,
           imsccFileUrl: exportFile.getUrl(),
           exportFolderUrl: projectFolder.getUrl(),
           imsccFileId: exportFile.getId() };
}

/*──────────────────────── helper functions ────────────────────────*/

function IMSCC_processImages(images, resourcesFolder) {
  const map = new Map();
  if (!images) return map;
  const seen = {};
  images.forEach(function (img) {
    if (!img.blob || seen[img.filename]) return;
    const file = resourcesFolder.createFile(img.blob).setName(img.filename);
    map.set(img.filename, file.getId());
    seen[img.filename] = true;
  });
  return map;
}

function IMSCC_generateResourceEntries(imageMap) {
  const out = [];
  imageMap.forEach(function (_id, fn) {
    out.push(`<file href="resources/${fn}"/>`);
  });
  return out;
}

function IMSCC_createManifestFile(title, resourceEntries) {
  const safeTitle = sanitizeHtml(title);
  return `<?xml version="1.0" encoding="UTF-8"?>
<manifest identifier="IMSCC-MANIFEST">
  <metadata>
    <schema>IMS Common Cartridge</schema>
    <schemaversion>1.2.0</schemaversion>
  </metadata>
  <organizations>
    <organization identifier="org">
      <item identifier="item1" identifierref="ccres0000001">
        <title>${safeTitle}</title>
      </item>
    </organization>
  </organizations>
  <resources>
    <resource identifier="ccres0000001"
              type="imsqti_xmlv1p2/imscc_xmlv1p2/assessment"
              href="ccres0000001/ccres0000001.xml">
      <file href="ccres0000001/ccres0000001.xml"/>
      ${resourceEntries.join('\n      ')}
    </resource>
  </resources>
</manifest>`;
}

/*────── QTI generation ──────*/

function IMSCC_createQTI(title, questions, imageMap) {
  const assessId   = 'ccres' + Utilities.getUuid().slice(0,8);
  const safeTitle  = sanitizeHtml(title);
  let xml =
`<?xml version="1.0" encoding="UTF-8"?>
<questestinterop xmlns="http://www.imsglobal.org/xsd/ims_qtiasiv1p2">
  <assessment ident="${assessId}" title="${safeTitle}">
    <qtimetadata>
      <qtimetadatafield><fieldlabel>cc_profile</fieldlabel><fieldentry>cc.exam.v0p1</fieldentry></qtimetadatafield>
    </qtimetadata>
    <section ident="root_section">`;

  questions.forEach(function (q, idx) {
    const num = idx + 1;
    switch (q.type) {
      case QUESTION_TYPES.MULTIPLE_CHOICE:
        xml += IMSCC_createMultipleChoiceXML(q, num, imageMap);
        break;
      case QUESTION_TYPES.FILL_IN_BLANK:
        xml += IMSCC_createFillInBlankXML(q, num, imageMap);
        break;
      default:
        xml += IMSCC_createShortAnswerXML(q, num, imageMap);
    }
  });

  xml += `
    </section>
  </assessment>
</questestinterop>`;
  return xml;
}

/*──── item writers (namespaced) ────*/

function IMSCC_createMultipleChoiceXML(question, qNum, imageMap) {
  let qText = sanitizeHtml(question.questionText);
  if (question.hasImages) qText = replaceImageTags(qText, imageMap, qNum);
  const mattext = /[<&]/.test(qText) ? `<![CDATA[${qText}]]>` : qText;

  let xml =
`      <item ident="${qNum}">
        <presentation>
          <material>
            <mattext texttype="text/html">${mattext}</mattext>
          </material>
          <response_lid ident="${qNum}" rcardinality="Single">
            <render_choice shuffle="No">`;

  question.options.forEach(function (opt, i) {
    const optId = 'choice_' + (i + 1);
    let content = opt.hasImages ? opt.text : sanitizeHtml(opt.text);
    if (opt.hasImages) content = replaceImageTags(content, imageMap, qNum);
    content = `<![CDATA[${content}]]>`;
    xml += `
              <response_label ident="${optId}">
                <material><mattext texttype="text/html">${content}</mattext></material>
              </response_label>`;
  });

  xml += `
            </render_choice>
          </response_lid>
        </presentation>
        <resprocessing>
          <outcomes><decvar vartype="Decimal" varname="SCORE" minvalue="0" maxvalue="100"/></outcomes>
          <respcondition continue="No">
            <conditionvar><varequal respident="${qNum}">choice_${question.correctAnswerIndex + 1}</varequal></conditionvar>
            <setvar varname="SCORE" action="Set">100</setvar>
          </respcondition>
        </resprocessing>
      </item>`;
  return xml;
}

function IMSCC_createFillInBlankXML(question, qNum, imageMap) {
  let text = sanitizeHtml(question.questionText);
  if (question.hasImages) text = replaceImageTags(text, imageMap, qNum);
  const answers = (question.correctAnswers || []).map(function (ans) {
    return `<varequal respident="${qNum}">${sanitizeHtml(ans)}</varequal>`;
  }).join('\n              ');
  return `
      <item ident="${qNum}">
        <presentation>
          <material><mattext texttype="text/html"><![CDATA[${text}]]></mattext></material>
          <response_str ident="${qNum}" rcardinality="Single"><render_fib prompt="Dashline"/></response_str>
        </presentation>
        <resprocessing>
          <outcomes><decvar vartype="Decimal" varname="SCORE" minvalue="0" maxvalue="100"/></outcomes>
          <respcondition continue="No">
            <conditionvar>
              ${answers}
            </conditionvar>
            <setvar varname="SCORE" action="Set">100</setvar>
          </respcondition>
        </resprocessing>
      </item>`;
}

function IMSCC_createShortAnswerXML(question, qNum, imageMap) {
  let text = sanitizeHtml(question.questionText);
  if (question.hasImages) text = replaceImageTags(text, imageMap, qNum);
  return `
      <item ident="${qNum}">
        <presentation>
          <material><mattext texttype="text/html"><![CDATA[${text}]]></mattext></material>
          <response_str ident="${qNum}" rcardinality="Single">
            <render_fib><response_label ident="${qNum}1" rshuffle="No"/></render_fib>
          </response_str>
        </presentation>
        <resprocessing>
          <outcomes><decvar vartype="Decimal" varname="SCORE" minvalue="0" maxvalue="100"/></outcomes>
          <respcondition><conditionvar><other/></conditionvar><setvar varname="SCORE" action="Set">100</setvar></respcondition>
        </resprocessing>
      </item>`;
}
