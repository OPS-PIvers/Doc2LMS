/**
 * OptionHandling.gs – Shared functions for processing answer options.
 */
function validateMultipleChoiceOptions(options) {
  if (!options || options.length < 2) return false;
  var letters = options.map(function(opt) { return opt.letter; }).filter(Boolean);
  if (letters.length < 2) return false;
  var expected = ["A", "B", "C", "D"];
  return letters.every(function(letter, idx) { return letter === expected[idx]; });
}

function isValidOptionText(text) {
  var specialPatterns = [/^[A-Z][a-z]?\d*/, /\d+\s*[x×]\s*10\d+/, /[<>]/];
  if (specialPatterns.some(function(p) { return p.test(text); })) return true;
  return text.length > 0 && !/^[A-Da-d][).:]?\s*$/.test(text);
}

function isOptionStart(text) {
  var m = text.match(/^\s*(?:\(([A-Da-d])\)|([A-Da-d])(?:[).:\s-]|\s*$))/i);
  if (m) {
    var letter = (m[1] || m[2]).toUpperCase();
    return { isOption: true, letter: letter };
  }
  return { isOption: false };
}

function getExpectedNextLetter(currentLetter) {
  var seq = ["A", "B", "C", "D"];
  var idx = seq.indexOf(currentLetter.toUpperCase());
  return (idx !== -1 && idx < seq.length - 1) ? seq[idx + 1] : null;
}




function parseOptions(optionsArray, format) {
  var options = [];
  var nextLetterIndex = 0;
  var expanded = [];
  optionsArray.forEach(function(item) {
    if (typeof item === "string") {
      var clean = item.replace(/\r/g, "").trim();
      if (clean.indexOf("\n") !== -1) {
        var parts = clean.split("\n").map(function(line) { return line.trim(); })
                     .filter(function(line) { return line && /^[A-Za-z][).]\s|^\([A-Za-z]\)\s/.test(line); });
        expanded = expanded.concat(parts);
      } else if (clean) {
        expanded.push(clean);
      }
    } else {
      expanded.push(item);
    }
  });
  expanded.forEach(function(item) {
    if (!item) return;
    var clean = (typeof item === "string") ? item.trim() : item;
    if (!clean) return;
    var letter, text;
    var images = [];
    var hasImages = false;
    if (typeof clean === "object") {
      if (clean.letter && clean.text) {
        options.push({
          letter: clean.letter,
          text: clean.text,
          images: clean.images || [],
          hasImages: clean.hasImages || false
        });
        return;
      }
      if (clean.image || clean.blob) { images.push(clean); hasImages = true; }
    }
    var patterns = [
      /^[(]([A-Za-z])[)][\s.]*(.*)/,
      /^([A-Za-z])[)][\s.]*(.*)/,
      /^([A-Za-z])[\s.]+[\s.]*(.*)/,
      /^([A-Za-z])[\s]*[-:][\s.]*(.*)/
    ];
    var matched = false;
    for (var i = 0; i < patterns.length; i++) {
      var m = (typeof clean === "string") && clean.match(patterns[i]);
      if (m) { letter = m[1].toUpperCase(); text = m[2].trim(); matched = true; break; }
    }
    if (!matched) {
      if (format === "native" && typeof clean === "string" && /^[a-zA-Z]/.test(clean)) {
        letter = clean.charAt(0).toUpperCase();
        text = clean.substring(1).replace(/^[).:\s-]*/, "").trim();
      } else {
        letter = String.fromCharCode(65 + nextLetterIndex);
        text = (typeof clean === "string") ? clean : JSON.stringify(clean);
      }
      nextLetterIndex++;
    }
    if (typeof text === "object" && text.image) {
      images.push(text);
      hasImages = true;
      text = "[Image Option " + letter + "]";
    }
    if (letter && text) {
      options.push({ letter: letter, text: text, images: images, hasImages: hasImages });
    }
  });
  options.sort(function(a, b) { return a.letter.localeCompare(b.letter); });
  return options;
}

function processOptionImages(option, questionNumber) {
  if (!option.hasImages || !option.text) return option.text;
  var processed = option.text;
  var matches = processed.match(/\[IMG:[^\]]+\]/g) || [];
  matches.forEach(function(ph) {
    var id = ph.match(/\[IMG:([^\]]+)\]/)[1];
    var meta = option.images.find(function(img) { return img.id === id; });
    if (meta) {
      var filename = "question_" + questionNumber + "_option_" + option.letter + "_" + id + ".png";
      var tag = '<p dir="ltr"><img src="$IMS-CC-FILEBASE$../resources/' + filename + '" width="' + meta.width + '" height="' + meta.height + '" alt="" /></p>';
      processed = processed.replace(ph, tag);
    }
  });
  return processed;
}
